function [x,n_itererr_path,] = successive_over_relaxation(A,b,w,x_star,verbose)
%[x,n_iter] = SUCCESSIVE_OVER_RELAXATION(A,b,w)
%solves Ax=b
%w is the relaxation parameter. w=1 is Gauss-Seidel
%if A==A' and 0<w<2, then SOR converges
if ~exist('verbose','var')
  verbose = 0;
end
have_x_star = exist('x_star','var');
n = size(A,1);
assert(size(A,2)==n);
if have_x_star, err_path = nan(1e9,1); end
L = tril(A);
U = A - L;
invL = L^-1;
x = invL * b;
if have_x_star, err_path(1) = norm(x-x_star); end
tol = 1e-6;
n_iter = 0;
while 1
  n_iter = n_iter+1;
%   xnew = x*nan;
%   for i=1:n
%     xnew(i) = (1-w)*x(i)+w/A(i,i)*(b(i)-A(i,1:i-1)*xnew(1:i-1)-A(i,i+1:n)*x(i+1:n));
%   end
  z = b-U*x;
  x_gs = invL*z;
%   x_gs = nan*x;
%   for i=1:n
%     x_gs(i) = 1/A(i,i)*(b(i)-A(i,1:i-1)*x_gs(1:i-1)-A(i,i+1:n)*x(i+1:n));
%   end
  xnew = (1-w)*x+w*x_gs;
  if have_x_star, err_path(1+n_iter) = norm(x-x_star); end
  if verbose && mod(n_iter,1000)==0
    disp(max(abs(xnew-x)));
  end
  if max(abs(xnew-x))<=tol
    x = xnew;
    break
  end
  x = xnew;
end